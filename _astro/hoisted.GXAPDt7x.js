import{p as T}from"./PhaserGame.astro_astro_type_script_index_0_lang.CdtLd1RY.js";import{a as S,H as $,T as E}from"./plugin.D2D7AgCA.js";import{d as b}from"./scene-with-phaser-wind.BlrV0HLv.js";import{S as V}from"./scene-with-hudini.CoM_FvKi.js";import"./webfontloader.2XYdQRer.js";const _=10;class D{constructor(e){this.plugin=e,this.plugin=e}get game(){return this.plugin.getGame()}loadBySoundKey(e,o){const{game:n,plugin:s}=this;n.cache.audio.has(o)||e.load.audio(o,s.soundList[o]?.path)}loadByChannel(e,o){const{plugin:n}=this;Object.entries(n.soundList).filter(s=>s[1].channel===o).forEach(([s])=>{this.loadBySoundKey(e,s)})}}class N{constructor(e){this.plugin=e,this.plugin=e}get game(){return this.plugin.getGame()}get soundRegistry(){return this.plugin.soundRegistry}play(e){const o=this.soundRegistry.getChannelBySoundKey(e);switch(o.mode){case"single":this.playSingleMode(e);break;case"multiple":this.playMultipleMode(e,o.maxInstances);break}}playSingleMode(e){const o=this.soundRegistry.getSoundBySoundKey(e);if(o){o.isPlaying||o.play();return}const n=this.soundRegistry.getSoundConfigBySoundKey(e);this.game.sound.add(e,{volume:n?.channel?this.plugin.getChannelVolume(n.channel):1,loop:n?.loop??!1}).play()}playMultipleMode(e,o=_){const n=this.soundRegistry.fetchSoundsBySoundKey(e),s=n.find(a=>!a.isPlaying);if(s){s.play();return}if(n.length<o){const a=this.soundRegistry.getSoundConfigBySoundKey(e);this.game.sound.add(e,{volume:a?.channel?this.plugin.getChannelVolume(a.channel):1,loop:a?.loop??!1}).play()}}}class R{constructor(e){this.plugin=e,this.plugin=e}get game(){return this.plugin.getGame()}get soundPlayer(){return this.plugin.soundPlayer}get channels(){return this.plugin.channels}get soundList(){return this.plugin.soundList}getSoundConfigBySoundKey(e){return this.soundList[e]??null}getSoundBySoundKey(e){const o=this.fetchSoundsBySoundKey(e);return o.length>0?o[0]:null}fetchSoundsBySoundKey(e){return this.game.sound.getAll(e)}getChannelBySoundKey(e){const o=this.soundList[e];return this.channels[o.channel]}}function g(t){return t!==null&&typeof t=="object"&&!Array.isArray(t)&&Object.prototype.toString.call(t)==="[object Object]"}function L(t,...e){if(!g(t))return t;const o={...t};for(const n of e)if(g(n)){for(const s in n)if(Object.prototype.hasOwnProperty.call(n,s)){const a=n[s],r=o[s];g(a)&&g(r)?o[s]=L(r,a):a!==void 0&&(o[s]=a)}}return o}const u=()=>new Date().toISOString().replace("T"," ").replace("Z",""),h=t=>{const e=u(),o="%c[phaser-hooks]%c",n=t?` %c${t}%c`:"";return`%c[${e}]%c ${o}${n}`},d=t=>{const e=["color: #bd93f9; font-weight: bold;","color: inherit;","color: #2563eb; font-weight: bold;","color: inherit;"];return t&&e.push("color: #059669; font-weight: bold;","color: inherit;"),e},v=(t,e)=>{const o=h("STATE_INIT"),n=d("STATE_INIT");console.groupCollapsed(`${o} Initializing state "${t}"`,...n),console.log("🔧 Key:",t),console.log("📦 Initial Value:",e),console.log("⏰ Timestamp:",u()),console.groupEnd()},x=(t,e)=>{const o=h("STATE_GET"),n=d("STATE_GET");console.log(`${o} Getting state "${t}":`,...n,e)},f=(t,e,o)=>{const n=h("STATE_SET"),s=d("STATE_SET");console.groupCollapsed(`${n} Updating state "${t}"`,...s),console.log("🔑 Key:",t),console.log("📤 Old Value:",e),console.log("📥 New Value:",o),console.log("🔄 Changed:",e!==o),console.log("⏰ Timestamp:",u()),console.groupEnd()},O=(t,e,o)=>{const n=h("EVENT_ADD"),s=d("EVENT_ADD");console.groupCollapsed(`${n} Adding listener for "${t}"`,...s),console.log("🔑 Key:",t),console.log("📡 Event:",e),console.log("🎯 Callback:",o.name||"anonymous"),console.log("⏰ Timestamp:",u()),console.groupEnd()},m=(t,e,o)=>{const n=h("EVENT_REMOVE"),s=d("EVENT_REMOVE");console.groupCollapsed(`${n} Removing listener for "${t}"`,...s),console.log("🔑 Key:",t),console.log("📡 Event:",e),console.log("🎯 Callback:",o.name||"anonymous"),console.log("⏰ Timestamp:",u()),console.groupEnd()},A=t=>{const e=h("CLEAR_LISTENERS"),o=d("CLEAR_LISTENERS");console.groupCollapsed(`${e} Clearing all listeners for "${t}"`,...o),console.log("🔑 Key:",t),console.log("🧹 Action:","Removing all event listeners"),console.log("⏰ Timestamp:",u()),console.groupEnd()},K=(t,e,o)=>{const n=h(t),s=d(t);console.groupCollapsed(`${n} ERROR`,...s),console.error("🚨 Operation:",t),console.error("💥 Error:",e),o&&console.error("📋 Context:",o),console.error("⏰ Timestamp:",u()),console.groupEnd()},I=(t,e,o)=>{const n=h(t),s=d(t);console.groupCollapsed(`${n} WARNING`,...s),console.warn("⚠️ Operation:",t),console.warn("📢 Message:",e),o&&console.warn("📋 Context:",o),console.warn("⏰ Timestamp:",u()),console.groupEnd()},P=(t,e,o)=>{const n=t.get(e);return o&&x(e,n),n},B=(t,e,o,n,s)=>{const a=t.get(e),r=typeof o=="function"?o(a):o;if(s){const l=s(r);if(l!==!0){const i=typeof l=="string"?l:`Invalid value for key "${e}"`;throw new Error(`[withStateDef] ${i}`)}}t.set(e,r),n&&f(e,a,r)},M=(t,e,o,n,s)=>{const a=t.get(e);if(typeof a!="object"||a===null)throw new Error("[withStateDef] Current value is not an object");const r=typeof o=="function"?o(a):o,l=L({},a,r);if(s){const i=s(l);if(i!==!0){const c=typeof i=="string"?i:`Invalid value for key "${e}"`;throw new Error(`[withStateDef] ${c}`)}}t.set(e,l),n&&f(e,a,l)},G=(t,e,o,n)=>{if(I("DEPRECATED_ONCHANGE","onChange callback is deprecated in phaser-hooks. Use .on('change', callback) or .once('change', callback) instead.",{key:e}),!n||typeof n!="function")throw new Error("[withStateDef] onChange callback must be a function");t.events.on(`changedata-${e}`,(s,a,r,l)=>{o&&f(a,l,r);try{n(r,l)}catch(i){K("ONCHANGE_CALLBACK_ERROR",i,{key:a})}})},H=(t,e,o,n,s)=>{if(e!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');return n&&O(o,e,s),t.events.on(`changedata-${o}`,s),()=>{n&&m(o,e,s),t.events.off(`changedata-${o}`,s)}},U=(t,e,o)=>{if(!t)throw new Error("[withStateDef] Scene parameter is required");if(!o||typeof o!="string"||o.trim().length===0)throw new Error("[withStateDef] Key must be a non-empty string");if(e.global&&!t.registry)throw new Error("[withStateDef] Scene registry is not available. Ensure the scene is properly initialized.");if(!e.global&&!t.data)throw new Error("[withStateDef] Scene data is not available. Ensure the scene is properly initialized.")},j=(t,e,o,n,s)=>{if(!t.has(e)&&s!==void 0){if(n){const a=n(s);if(a!==!0){const r=typeof a=="string"?a:`Invalid initial value for key "${e}"`;throw new Error(`[withStateDef] ${r}`)}}t.set(e,s),o&&v(e,s)}},z=(t,e,o,n,s)=>{if(e!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');return n&&O(o,e,s),t.events.once(`changedata-${o}`,s),()=>{n&&m(o,e,s),t.events.off(`changedata-${o}`,s)}},F=(t,e,o,n,s)=>{if(e!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');t.events.off(`changedata-${o}`,s),n&&m(o,e,s)},W=(t,e,o)=>{t.events.removeAllListeners(`changedata-${e}`),o&&A(e)},Y=(t,e,o,n={})=>{U(t,n,e);const{validator:s,debug:a=!1,global:r=!1}=n,l=r?t.registry:t.data;return j(l,e,a,s,o),{get:()=>P(l,e,a),set:i=>B(l,e,i,a,s),patch:i=>M(l,e,i,a,s),onChange:i=>G(l,e,a,i),on:(i,c)=>H(l,i,e,a,c),once:(i,c)=>z(l,i,e,a,c),off:(i,c)=>F(l,i,e,a,c),clearListeners:()=>W(l,e,a)}},q=(t,e,o,n)=>{if(!t)throw new Error("[withGlobalState] Scene parameter is required");const s=`phaser-hooks:global:${e}`;return Y(t,s,o,{...n,global:!0})},w=(t,e,o,n,s="local")=>{const a=`phaser-hooks-state:${e}`;let r=o;try{const i=s==="local"?localStorage.getItem(a):sessionStorage.getItem(a);i&&(r=JSON.parse(i))}catch(i){console.warn(`[withPersistentState] Failed to load stored state for "${e}":`,i)}const l=q(t,e,r);return l.onChange(i=>{try{(s==="local"?localStorage:sessionStorage).setItem(a,JSON.stringify(i))}catch(c){console.warn(`[withPersistentState] Failed to save state for "${e}":`,c)}}),l},p="soundStudio";class J extends T.Plugins.BasePlugin{channelVolumes={};soundPlayer;soundLoader;soundRegistry;soundList;channels;storage;gameName;getGame(){return this.game}constructor(e){super(e),this.soundList={},this.soundLoader=new D(this),this.channels={},this.storage="local",this.soundPlayer=new N(this),this.soundRegistry=new R(this)}init({soundList:e,channels:o,storage:n,gameName:s}){this.soundList=e,this.channels=o,this.storage=n,this.gameName=s,Object.keys(o).forEach(a=>{this.channelVolumes[a]=1})}loadAll(e){const o=Object.entries(this.soundList).filter(n=>n[1].preload!==!1);for(const[n,s]of o)e.load.audio(n,s.path);this.loadChannelVolumes(e)}loadByChannel(e,o){this.soundLoader.loadByChannel(e,o),this.loadChannelVolumes(e)}loadBySoundKey(e,o){this.soundLoader.loadBySoundKey(e,o)}play(e){this.soundPlayer.play(e)}playOnce(e,o){e.sound.get(o)?.isPlaying||this.play(o)}lazyLoadPlay(e,o){const n=this.soundList[o]?.path;n&&(e.load.audio(o,n),e.load.once(`filecomplete-audio-${o}`,()=>{this.play(o)}))}setChannelVolume(e,o,n){(n<0||n>1)&&(n=Math.max(0,Math.min(1,n)),console.warn(`Volume must be between 0 and 1. Setting volume to ${n} instead in channel ${o}.`)),this.channelVolumes[o]=n,Object.entries(this.soundList).filter(s=>s[1].channel===o).forEach(([s])=>{const a=e.sound.get(s);a&&"setVolume"in a&&a.setVolume(n)}),this.saveChannelVolumes(e)}getChannelVolume(e){return this.channelVolumes[e]??1}muteChannel(e,o){this.setChannelVolume(e,o,0)}unmuteChannel(e,o){this.setChannelVolume(e,o,1)}getAllChannels(){return this.channels}persistNameKey(){return this.gameName?`phaser-sound-studio-volumes:${this.gameName}`:"phaser-sound-studio-volumes"}saveChannelVolumes(e){w(e,this.persistNameKey(),this.channelVolumes,void 0,this.storage).set(this.channelVolumes)}loadChannelVolumes(e){const o=w(e,this.persistNameKey(),this.channelVolumes,void 0,this.storage);this.channelVolumes=o.get()}}const X=(t,e=p)=>t.plugins.get(e),y={MOUSE_HOVER:"mouse-hover",MOUSE_CLICK:"mouse-click"},C={HUD:"hud"},Z={[y.MOUSE_HOVER]:{channel:C.HUD,preload:!0,path:"/sounds/ui-pop.m4a",loop:!1},[y.MOUSE_CLICK]:{channel:C.HUD,preload:!0,path:"/sounds/click.mp3",loop:!1}};class Q extends V{constructor(){super("sound-studio-demo")}preload(){X(this).loadAll(this)}create(){this.cameras.main.setBackgroundColor(this.pw.color.rgb("slate-900")),this.add.text(400,100,"Phaser Sound Studio Demo",{color:"#ffffff",align:"center",fontSize:"32px"}).setOrigin(.5,.5),this.add.text(400,150,"Click the button to play a sound effect",{color:"#bdc3c7",align:"center",fontSize:"18px"}).setOrigin(.5,.5);const e=new E({scene:this,x:400,y:250,backgroundColor:"blue-500",textColor:"white",text:"Play Click Sound",onClick:()=>{console.log("Playing click sound...")}}),o=new E({scene:this,x:400,y:320,backgroundColor:"green-500",textColor:"white",text:"Play Hover Sound",onClick:()=>{console.log("Playing hover sound...")}});this.add.existing(e),this.add.existing(o),this.add.text(400,450,"Sound Channels: HUD, SFX, MUSIC, VOICE",{color:"#95a5a6",align:"center",fontSize:"14px"}).setOrigin(.5,.5),this.add.text(400,500,"Note: This is a demo - actual sound files would be loaded",{color:"#e74c3c",align:"center",fontSize:"12px"}).setOrigin(.5,.5)}}document.addEventListener("DOMContentLoaded",()=>{const t=window.__phaserGameConfigs?.["phaser-sound-studio-main-demo"];if(t){const e=new Phaser.Game({...t,plugins:{global:[{key:S,plugin:$,mapping:S,start:!0,data:{theme:b}},{key:p,plugin:J,mapping:p,start:!0,data:{soundList:Z,channels:["hud"]}}]},scene:[Q]});window.__phaserGames||(window.__phaserGames={}),window.__phaserGames["phaser-sound-studio-main-demo"]=e}});
