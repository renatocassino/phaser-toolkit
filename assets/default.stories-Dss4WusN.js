import{p,c as k,n as x,a as y,C as c,P as g,F as l}from"./create-game-ukjiax-1.js";import"./_commonjsHelpers-Cpj98o6Y.js";const P={alpha:.5,strokeColor:1920728,strokeAlpha:.3,strokeWidth:5,radius:16,fillColor:2450411},C={alpha:.05,strokeColor:1920728,strokeAlpha:.3,strokeWidth:5,radius:64,fillColor:2450411},A={alpha:1,strokeColor:1920728,strokeAlpha:.4,strokeWidth:5,radius:40,fillColor:1920728},n={MOVE_FACTOR:.03,SCREEN_PADDING:24,MAX_DISTANCE_FACTOR:.9,DISTANCE_THRESHOLD_MULTIPLIER:2.1,DEFAULT_TOP_PADDING:.2,DEFAULT_LEFT_HALF:.5,HIDDEN_POSITION:-100,HIDDEN_ALPHA:0,VISIBLE_ALPHA:1},I=a=>{const t=a.scale.width,e=a.scale.height;return{topLeft:{x:0,y:e*n.DEFAULT_TOP_PADDING},bottomRight:{x:t*n.DEFAULT_LEFT_HALF,y:e}}},D=(a,t,e)=>a>=e.topLeft.x&&a<=e.bottomRight.x&&t>=e.topLeft.y&&t<=e.bottomRight.y;var h;(function(a){a.UPDATE="touchpad-joystick-update",a.RELEASE="touchpad-joystick-release",a.PRESS="touchpad-joystick-press"})(h||(h={}));class E extends p.GameObjects.Container{deadZone;baseArea;stick;stickIcon;analogContainer;startPosition;buttonsContainer;touchId=null;deadZoneConfig;baseAreaConfig;stickConfig;bounds;constructor({scene:t,deadZone:e,baseArea:i,stick:s,stickIcon:o,bounds:r,enableWithoutTouch:d=!1}){super(t,0,0),this.deadZoneConfig={...P,...e??{}},this.baseAreaConfig={...C,...i??{}},this.stickConfig={...A,...s??{}},this.bounds=r??I(t),!(!this.scene.sys.game.device.input.touch&&!d)&&(this.setScrollFactor(0),this.createJoystick(o),this.setupEventListeners())}createJoystick(t){this.analogContainer=this.scene.add.container(n.HIDDEN_POSITION,n.HIDDEN_POSITION),this.add(this.analogContainer);const{deadZoneConfig:e,baseAreaConfig:i,stickConfig:s}=this;this.deadZone=this.scene.add.circle(0,0,e.radius,e.fillColor,e.alpha),this.deadZone.setOrigin(.5,.5).setStrokeStyle(e.strokeWidth,e.strokeColor,e.strokeAlpha),this.analogContainer.add(this.deadZone),this.baseArea=this.scene.add.circle(0,0,i.radius,i.fillColor,i.alpha),this.baseArea.setOrigin(.5,.5).setStrokeStyle(i.strokeWidth,i.strokeColor,i.strokeAlpha),this.analogContainer.add(this.baseArea),this.stick=this.scene.add.circle(0,0,s.radius,s.fillColor,s.alpha),this.stick.setOrigin(.5,.5).setStrokeStyle(s.strokeWidth,s.strokeColor,s.strokeAlpha),this.analogContainer.add(this.stick),t&&(this.stickIcon=t,this.analogContainer.add(this.stickIcon)),this.stickIcon&&(this.stickIcon.setOrigin(.5,.5),this.analogContainer.add(this.stickIcon))}resetJoystick(t){this.touchId===null||this.touchId!==t.id||this.startPosition===null||(this.analogContainer.setPosition(n.HIDDEN_POSITION,n.HIDDEN_POSITION),this.analogContainer.setAlpha(n.HIDDEN_ALPHA),this.stick.setPosition(0,0),this.stickIcon?.setPosition(0,0),this.startPosition=null,this.touchId=null)}on(t,e){return t==="move"?(this.scene.events.on(h.UPDATE,e),this):t==="release"?(this.scene.events.on(h.RELEASE,e),this):t==="press"?(this.scene.events.on(h.PRESS,e),this):(console.warn(`Event ${t} not supported`),this)}emitMove(t,e){this.scene.events.emit(h.UPDATE,{x:t,y:e})}emitRelease(){this.scene.events.emit(h.RELEASE)}emitPress(){this.scene.events.emit(h.PRESS)}update(){if(this.startPosition===null||!this.touchId||this.touchId!==this.scene.input.activePointer.id)return;let t=null;this.scene.input.manager.pointers&&(t=this.scene.input.manager.pointers.find(o=>o.id===this.touchId)),t??=this.scene.input.activePointer;const e=new p.Math.Vector2(t.x,t.y).subtract(this.startPosition),i=this.baseArea.radius*n.MAX_DISTANCE_FACTOR;e.length()>i*n.DISTANCE_THRESHOLD_MULTIPLIER&&this.moveJoystickToPointer(e)}moveJoystickToPointer(t){const e=n.SCREEN_PADDING;if(this.startPosition===null)return;let i=this.startPosition.x+t.x*n.MOVE_FACTOR,s=this.startPosition.y+t.y*n.MOVE_FACTOR;const o=this.bounds.topLeft.x+e+this.baseArea.radius+this.stick.radius,r=this.bounds.bottomRight.x-e-this.baseArea.radius-this.stick.radius,d=this.bounds.topLeft.y+e+this.baseArea.radius+this.stick.radius,m=this.bounds.bottomRight.y-e-this.baseArea.radius-this.stick.radius;i=Math.max(i,o),i=Math.min(i,r),s=Math.max(s,d),s=Math.min(s,m),this.startPosition.set(i,s),this.analogContainer.setPosition(i,s)}setupEventListeners(){this.scene.input.on("pointerdown",this.onPointerDown,this),this.scene.input.on("pointermove",this.onPointerMove,this),this.scene.input.on("pointerup",this.onPointerUp,this),this.scene.input.on("pointercancel",this.onPointerCancel,this)}onPointerDown(t){const{x:e,y:i}=t;this.touchId!==null||this.scene.input.hitTestPointer(t).some(r=>!r.input?.enabled||r===this||r===this.analogContainer?!1:r.parentContainer===this.buttonsContainer)||D(e,i,this.bounds)&&(this.analogContainer.setPosition(e,i),this.analogContainer.setAlpha(n.VISIBLE_ALPHA),this.stickIcon?.setPosition(0,0),this.startPosition=new p.Math.Vector2(e,i),this.touchId=t.id,this.emitPress())}onPointerMove(t){const{x:e,y:i}=t;if(this.startPosition===null||!this.touchId||this.touchId!==t.id)return;const s=new p.Math.Vector2(e,i).subtract(this.startPosition),o=this.baseArea.radius*n.MAX_DISTANCE_FACTOR,r=s.length();r>o&&s.normalize().scale(o);const d=s.x/o,m=s.y/o;this.emitMove(d,m),this.stick.setPosition(s.x,s.y),this.stickIcon?.setPosition(s.x,s.y),r>o*n.DISTANCE_THRESHOLD_MULTIPLIER&&this.moveJoystickToPointer(s)}onPointerUp(t){this.emitRelease(),this.resetJoystick(t)}onPointerCancel(t){this.emitRelease(),this.resetJoystick(t)}destroy(){this.scene.input.off("pointerdown",this.onPointerDown,this),this.scene.input.off("pointermove",this.onPointerMove,this),this.scene.input.off("pointerup",this.onPointerUp,this),this.scene.input.off("pointercancel",this.onPointerCancel,this),this.removeAll(!0),this.startPosition=null,this.touchId=null,super.destroy()}}const f="phaser-virtual-joystick-default",T=`
import { VirtualJoystick } from 'phaser-virtual-joystick';

class GameScene extends Phaser.Scene {
    create() {
        // Create a virtual joystick with default settings
        const joystick = new VirtualJoystick({
            scene: this
        });

        // Listen to joystick events
        joystick.on('move', (data) => {
            console.log(\`Joystick position: \${data.x}, \${data.y}\`);
        });

        joystick.on('press', () => {
            console.log('Joystick pressed');
        });

        joystick.on('release', () => {
            console.log('Joystick released');
        });
    }
}
`;class S extends g.Scene{joystick;positionText;eventText;character;axesPosition={x:0,y:0};constructor(){super("preview")}preload(){}create(){this.cameras.main.setBackgroundColor(c.rgb("slate-900"));const t=this.cameras.main.centerX,e=this.cameras.main.centerY;this.add.text(t,80,"Phaser Virtual Joystick",{color:c.rgb("slate-200"),align:"center",fontSize:l.px("4xl")}).setOrigin(.5,.5),this.add.text(t,140,"Touch and drag in the left half of the screen to use the joystick",{color:c.rgb("slate-300"),align:"center",fontSize:l.px("lg"),wordWrap:{width:600}}).setOrigin(.5,.5),this.positionText=this.add.text(t,e-100,"Position: (0, 0)",{color:c.rgb("slate-200"),align:"center",fontSize:l.px("2xl")}).setOrigin(.5,.5),this.eventText=this.add.text(t,e-50,"Status: Ready",{color:c.rgb("slate-300"),align:"center",fontSize:l.px("lg")}).setOrigin(.5,.5);const i=this.add.circle(t+200,e,20,5195493,1);this.character=i,i.setStrokeStyle(2,3223169),this.sys.game.device.input.touch?(this.joystick=new E({scene:this,bounds:{topLeft:{x:0,y:40},bottomRight:{x:this.cameras.main.width/2,y:this.cameras.main.height}},stickIcon:this.add.text(0,0,"ðŸŽ®",{fontSize:"24px",color:"#ffffff"}),enableWithoutTouch:!0}),this.add.existing(this.joystick),this.joystick.on("move",o=>{this.axesPosition={x:o.x,y:o.y},this.positionText&&this.positionText.setText(`Position: (${o.x.toFixed(2)}, ${o.y.toFixed(2)})`)}),this.joystick.on("press",()=>{this.axesPosition={x:0,y:0},this.eventText&&(this.eventText.setText("Status: Joystick Pressed"),this.eventText.setColor(c.rgb("green-400")))}),this.joystick.on("release",()=>{this.axesPosition={x:0,y:0},this.eventText&&(this.eventText.setText("Status: Joystick Released"),this.eventText.setColor(c.rgb("red-400")))})):this.add.text(t,e,"This demo requires a touch device to work properly",{color:c.rgb("slate-400"),align:"center",fontSize:l.px("lg"),wordWrap:{width:500}}).setOrigin(.5,.5),this.add.rectangle(this.cameras.main.width/4,this.cameras.main.height/2,this.cameras.main.width/2,this.cameras.main.height,1976635,.1).setStrokeStyle(2,4674921,.3),this.add.text(this.cameras.main.width/4,50,"Joystick Area",{color:c.rgb("slate-400"),align:"center",fontSize:l.px("sm")}).setOrigin(.5,.5),this.add.text(t+200,50,"Character (moves with joystick)",{color:c.rgb("slate-400"),align:"center",fontSize:l.px("sm")}).setOrigin(.5,.5)}update(){this.joystick?.update();const t=1.1;(this.axesPosition.x!==0||this.axesPosition.y!==0)&&this.character?.setPosition(this.character.x+this.axesPosition.x*t,this.character.y+this.axesPosition.y*t)}destroy(){this.joystick&&this.joystick.destroy()}}const O={title:"Phaser Virtual Joystick/Examples/Default",parameters:{docs:{description:{component:"Basic example showing the default behavior of the Virtual Joystick component."}}}},u={render:()=>{const a=document.createElement("div");return a.id=f,a},play:async()=>{await k(),await x(3),y(f,{type:g.AUTO,width:800,height:600,backgroundColor:c.rgb("slate-900"),parent:document.getElementById(f),scene:[S]})}};u.parameters={docs:{autoplay:!0,story:{inline:!1},source:{code:T}}};u.parameters={...u.parameters,docs:{...u.parameters?.docs,source:{originalSource:`{
  render: () => {
    const root = document.createElement('div');
    root.id = ID;
    return root;
  },
  play: async (): Promise<void> => {
    await cleanGames();
    await nextFrames(3);
    createGame(ID, {
      type: Phaser.AUTO,
      width: 800,
      height: 600,
      backgroundColor: Color.rgb('slate-900'),
      parent: document.getElementById(ID) as HTMLElement,
      scene: [PreviewScene]
    });
  }
}`,...u.parameters?.docs?.source}}};const _=["Default"];export{u as Default,_ as __namedExportsOrder,O as default};
