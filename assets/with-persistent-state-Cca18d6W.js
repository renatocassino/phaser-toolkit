const c=(o,t,e)=>{const r=o.get(t);return e&&console.debug(`[withStateDef] Getting "${t}":`,r),r},l=(o,t,e,r,n)=>{if(n){const f=n(e);if(f!==!0){const s=typeof f=="string"?f:`Invalid value for key "${t}"`;throw new Error(`[withStateDef] ${s}`)}}const a=o.get(t);o.set(t,e),r&&console.debug(`[withStateDef] Setting "${t}":`,{oldValue:a,newValue:e})},g=(o,t,e,r)=>{if(console.warn("[withStateDef] DEPRECATED: onChange callback is deprecated in phaser-hooks. Use .on('change', callback) or .once('change', callback) instead."),!r||typeof r!="function")throw new Error("[withStateDef] onChange callback must be a function");o.events.on(`changedata-${t}`,(n,a,f,s)=>{e&&console.debug(`[withStateDef] Change detected for "${a}":`,{previousValue:s,value:f});try{r(f,s)}catch(i){console.error(`[withStateDef] Error in onChange callback for "${a}":`,i)}})},w=(o,t,e,r,n)=>{if(t!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');return r&&console.debug(`[withStateDef] Adding event listener for "${e}":`,{event:t,callback:n}),o.events.on(`changedata-${e}`,n),()=>{r&&console.debug(`[withStateDef] Removing event listener for "${e}":`,{event:t,callback:n}),o.events.off(`changedata-${e}`,n)}},d=(o,t,e)=>{if(!o)throw new Error("[withStateDef] Scene parameter is required");if(!e||typeof e!="string"||e.trim().length===0)throw new Error("[withStateDef] Key must be a non-empty string");if(t.global&&!o.registry)throw new Error("[withStateDef] Scene registry is not available. Ensure the scene is properly initialized.");if(!t.global&&!o.data)throw new Error("[withStateDef] Scene data is not available. Ensure the scene is properly initialized.")},S=(o,t,e,r,n)=>{if(!o.has(t)&&n!==void 0){if(r){const a=r(n);if(a!==!0){const f=typeof a=="string"?a:`Invalid initial value for key "${t}"`;throw new Error(`[withStateDef] ${f}`)}}o.set(t,n),e&&console.debug(`[withStateDef] Initialized "${t}" with value:`,n)}},u=(o,t,e,r,n)=>{if(t!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');return r&&console.debug(`[withStateDef] Adding once event listener for "${e}":`,{event:t,callback:n}),o.events.once(`changedata-${e}`,n),()=>{r&&console.debug(`[withStateDef] Removing once event listener for "${e}":`,{event:t,callback:n}),o.events.off(`changedata-${e}`,n)}},D=(o,t,e,r,n)=>{if(t!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');o.events.off(`changedata-${e}`,n),r&&console.debug(`[withStateDef] Removing event listener for "${e}":`,{event:t,callback:n})},$=(o,t,e,r={})=>{d(o,r,t);const{validator:n,debug:a=!1,global:f=!1}=r,s=f?o.registry:o.data;return S(s,t,a,n,e),{get:()=>c(s,t,a),set:i=>l(s,t,i,a,n),onChange:i=>g(s,t,a,i),on:(i,h)=>w(s,i,t,a,h),once:(i,h)=>u(s,i,t,a,h),off:(i,h)=>D(s,i,t,a,h)}},v=(o,t,e,r)=>{if(!o)throw new Error("[withGlobalState] Scene parameter is required");const n=`phaser-hooks:global:${t}`;return $(o,n,e,{...r,global:!0})},p=(o,t,e,r,n="local")=>{const a=`phaser-hooks-state:${t}`;let f=e;try{const i=n==="local"?localStorage.getItem(a):sessionStorage.getItem(a);i&&(f=JSON.parse(i))}catch(i){console.warn(`[withPersistentState] Failed to load stored state for "${t}":`,i)}const s=v(o,t,f);return s.onChange(i=>{try{(n==="local"?localStorage:sessionStorage).setItem(a,JSON.stringify(i))}catch(h){console.warn(`[withPersistentState] Failed to save state for "${t}":`,h)}}),s};export{v as a,p as b,$ as w};
