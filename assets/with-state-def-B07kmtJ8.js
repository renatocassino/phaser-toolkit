const g=(n,e,t)=>{const r=n.get(e);return t&&console.debug(`[withStateDef] Getting "${e}":`,r),r},c=(n,e,t,r,o)=>{if(o){const f=o(t);if(f!==!0){const a=typeof f=="string"?f:`Invalid value for key "${e}"`;throw new Error(`[withStateDef] ${a}`)}}const i=n.get(e);n.set(e,t),r&&console.debug(`[withStateDef] Setting "${e}":`,{oldValue:i,newValue:t})},w=(n,e,t,r)=>{if(console.warn("[withStateDef] DEPRECATED: onChange callback is deprecated in phaser-hooks. Use .on('change', callback) or .once('change', callback) instead."),!r||typeof r!="function")throw new Error("[withStateDef] onChange callback must be a function");n.events.on(`changedata-${e}`,(o,i,f,a)=>{t&&console.debug(`[withStateDef] Change detected for "${i}":`,{previousValue:a,value:f});try{r(f,a)}catch(s){console.error(`[withStateDef] Error in onChange callback for "${i}":`,s)}})},d=(n,e,t,r,o)=>{if(e!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');return r&&console.debug(`[withStateDef] Adding event listener for "${t}":`,{event:e,callback:o}),n.events.on(`changedata-${t}`,o),()=>{r&&console.debug(`[withStateDef] Removing event listener for "${t}":`,{event:e,callback:o}),n.events.off(`changedata-${t}`,o)}},l=(n,e,t)=>{if(!n)throw new Error("[withStateDef] Scene parameter is required");if(!t||typeof t!="string"||t.trim().length===0)throw new Error("[withStateDef] Key must be a non-empty string");if(e.global&&!n.registry)throw new Error("[withStateDef] Scene registry is not available. Ensure the scene is properly initialized.");if(!e.global&&!n.data)throw new Error("[withStateDef] Scene data is not available. Ensure the scene is properly initialized.")},S=(n,e,t,r,o)=>{if(!n.has(e)&&o!==void 0){if(r){const i=r(o);if(i!==!0){const f=typeof i=="string"?i:`Invalid initial value for key "${e}"`;throw new Error(`[withStateDef] ${f}`)}}n.set(e,o),t&&console.debug(`[withStateDef] Initialized "${e}" with value:`,o)}},u=(n,e,t,r,o)=>{if(e!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');return r&&console.debug(`[withStateDef] Adding once event listener for "${t}":`,{event:e,callback:o}),n.events.once(`changedata-${t}`,o),()=>{r&&console.debug(`[withStateDef] Removing once event listener for "${t}":`,{event:e,callback:o}),n.events.off(`changedata-${t}`,o)}},D=(n,e,t,r,o)=>{if(e!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');n.events.off(`changedata-${t}`,o),r&&console.debug(`[withStateDef] Removing event listener for "${t}":`,{event:e,callback:o})},v=(n,e,t,r={})=>{l(n,r,e);const{validator:o,debug:i=!1,global:f=!1}=r,a=f?n.registry:n.data;return S(a,e,i,o,t),{get:()=>g(a,e,i),set:s=>c(a,e,s,i,o),onChange:s=>w(a,e,i,s),on:(s,h)=>d(a,s,e,i,h),once:(s,h)=>u(a,s,e,i,h),off:(s,h)=>D(a,s,e,i,h)}};export{v as w};
