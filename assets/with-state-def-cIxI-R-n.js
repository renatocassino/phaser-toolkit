import{m as w}from"./create-game-DQQ4oOcD.js";const i=()=>new Date().toISOString().replace("T"," ").replace("Z",""),g=e=>{const o=i(),t="%c[phaser-hooks]%c",n=e?` %c${e}%c`:"";return`%c[${o}]%c ${t}${n}`},f=e=>{const o=["color: #bd93f9; font-weight: bold;","color: inherit;","color: #2563eb; font-weight: bold;","color: inherit;"];return e&&o.push("color: #059669; font-weight: bold;","color: inherit;"),o},u=(e,o)=>{const t=g("STATE_INIT"),n=f("STATE_INIT");console.groupCollapsed(`${t} Initializing state "${e}"`,...n),console.log("🔧 Key:",e),console.log("📦 Initial Value:",o),console.log("⏰ Timestamp:",i()),console.groupEnd()},m=(e,o)=>{const t=g("STATE_GET"),n=f("STATE_GET");console.log(`${t} Getting state "${e}":`,...n,o)},h=(e,o,t)=>{const n=g("STATE_SET"),s=f("STATE_SET");console.groupCollapsed(`${n} Updating state "${e}"`,...s),console.log("🔑 Key:",e),console.log("📤 Old Value:",o),console.log("📥 New Value:",t),console.log("🔄 Changed:",o!==t),console.log("⏰ Timestamp:",i()),console.groupEnd()},d=(e,o,t)=>{const n=g("EVENT_ADD"),s=f("EVENT_ADD");console.groupCollapsed(`${n} Adding listener for "${e}"`,...s),console.log("🔑 Key:",e),console.log("📡 Event:",o),console.log("🎯 Callback:",t.name||"anonymous"),console.log("⏰ Timestamp:",i()),console.groupEnd()},E=(e,o,t)=>{const n=g("EVENT_REMOVE"),s=f("EVENT_REMOVE");console.groupCollapsed(`${n} Removing listener for "${e}"`,...s),console.log("🔑 Key:",e),console.log("📡 Event:",o),console.log("🎯 Callback:",t.name||"anonymous"),console.log("⏰ Timestamp:",i()),console.groupEnd()},S=e=>{const o=g("CLEAR_LISTENERS"),t=f("CLEAR_LISTENERS");console.groupCollapsed(`${o} Clearing all listeners for "${e}"`,...t),console.log("🔑 Key:",e),console.log("🧹 Action:","Removing all event listeners"),console.log("⏰ Timestamp:",i()),console.groupEnd()},T=(e,o,t)=>{const n=g(e),s=f(e);console.groupCollapsed(`${n} ERROR`,...s),console.error("🚨 Operation:",e),console.error("💥 Error:",o),t&&console.error("📋 Context:",t),console.error("⏰ Timestamp:",i()),console.groupEnd()},$=(e,o,t)=>{const n=g(e),s=f(e);console.groupCollapsed(`${n} WARNING`,...s),console.warn("⚠️ Operation:",e),console.warn("📢 Message:",o),t&&console.warn("📋 Context:",t),console.warn("⏰ Timestamp:",i()),console.groupEnd()},C=(e,o,t)=>{const n=e.get(o);return t&&m(o,n),n},v=(e,o,t,n,s)=>{const r=e.get(o),a=typeof t=="function"?t(r):t;if(s){const l=s(a);if(l!==!0){const c=typeof l=="string"?l:`Invalid value for key "${o}"`;throw new Error(`[withStateDef] ${c}`)}}e.set(o,a),n&&h(o,r,a)},D=(e,o,t,n,s)=>{const r=e.get(o);if(typeof r!="object"||r===null)throw new Error("[withStateDef] Current value is not an object");const a=typeof t=="function"?t(r):t,l=w({},r,a);if(s){const c=s(l);if(c!==!0){const p=typeof c=="string"?c:`Invalid value for key "${o}"`;throw new Error(`[withStateDef] ${p}`)}}e.set(o,l),n&&h(o,r,l)},A=(e,o,t,n)=>{if($("DEPRECATED_ONCHANGE","onChange callback is deprecated in phaser-hooks. Use .on('change', callback) or .once('change', callback) instead.",{key:o}),!n||typeof n!="function")throw new Error("[withStateDef] onChange callback must be a function");e.events.on(`changedata-${o}`,(s,r,a,l)=>{t&&h(r,l,a);try{n(a,l)}catch(c){T("ONCHANGE_CALLBACK_ERROR",c,{key:r})}})},R=(e,o,t,n,s)=>{if(o!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');return n&&d(t,o,s),e.events.on(`changedata-${t}`,s),()=>{n&&E(t,o,s),e.events.off(`changedata-${t}`,s)}},I=(e,o,t)=>{if(!e)throw new Error("[withStateDef] Scene parameter is required");if(!t||typeof t!="string"||t.trim().length===0)throw new Error("[withStateDef] Key must be a non-empty string");if(o.global&&!e.registry)throw new Error("[withStateDef] Scene registry is not available. Ensure the scene is properly initialized.");if(!o.global&&!e.data)throw new Error("[withStateDef] Scene data is not available. Ensure the scene is properly initialized.")},N=(e,o,t,n,s)=>{if(!e.has(o)&&s!==void 0){if(n){const r=n(s);if(r!==!0){const a=typeof r=="string"?r:`Invalid initial value for key "${o}"`;throw new Error(`[withStateDef] ${a}`)}}e.set(o,s),t&&u(o,s)}},_=(e,o,t,n,s)=>{if(o!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');return n&&d(t,o,s),e.events.once(`changedata-${t}`,s),()=>{n&&E(t,o,s),e.events.off(`changedata-${t}`,s)}},L=(e,o,t,n,s)=>{if(o!=="change")throw new Error('[withStateDef] Invalid event. Only "change" is supported.');e.events.off(`changedata-${t}`,s),n&&E(t,o,s)},O=(e,o,t)=>{e.events.removeAllListeners(`changedata-${o}`),t&&S(o)},x=(e,o,t,n={})=>{I(e,n,o);const{validator:s,debug:r=!1,global:a=!1}=n,l=a?e.registry:e.data;return N(l,o,r,s,t),{get:()=>C(l,o,r),set:c=>v(l,o,c,r,s),patch:c=>D(l,o,c,r,s),onChange:c=>A(l,o,r,c),on:(c,p)=>R(l,c,o,r,p),once:(c,p)=>_(l,c,o,r,p),off:(c,p)=>L(l,c,o,r,p),clearListeners:()=>O(l,o,r)}};export{x as w};
