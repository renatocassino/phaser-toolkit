---
export interface Props {
  id: string;
  width?: number;
  height?: number;
  className?: string;
}

const { id, width = 800, height = 600, className = "" } = Astro.props;
---

<div class={`bg-white rounded-lg shadow-sm border border-gray-200 p-4 ${className}`}>
  <h3 class="text-lg font-semibold text-gray-900 mb-4">Live Example</h3>
  <div 
    id={id} 
    class="w-full bg-gray-100 rounded border flex items-center justify-center"
    style={`height: ${height}px;`}
  >
    <div class="text-gray-500 text-center">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-2"></div>
      <p>Loading game...</p>
    </div>
  </div>
</div>

<script>
  // This will be executed on the client side
  import Phaser from 'phaser';
  
  // Clean up any existing game with this ID
  const existingGame = (window as any).__phaserGames?.[id];
  if (existingGame) {
    existingGame.destroy(true);
  }
  
  // Initialize games registry if it doesn't exist
  if (!(window as any).__phaserGames) {
    (window as any).__phaserGames = {};
  }
  
  // This will be overridden by the specific component
  const gameConfig = {
    type: Phaser.AUTO,
    width: width,
    height: height,
    backgroundColor: '#f3f4f6',
    parent: document.getElementById(id),
    scene: []
  };
  
  // Store the config for the specific component to use
  (window as any).__phaserGameConfigs = (window as any).__phaserGameConfigs || {};
  (window as any).__phaserGameConfigs[id] = gameConfig;
</script>