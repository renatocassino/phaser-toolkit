---
import Layout from '../../layouts/Layout.astro';
import PhaserGame from '../../components/PhaserGame.astro';
---

<Layout title="Hudini Card Component" description="A flexible card component that adapts to its child content size, using phaser-wind tokens for styling.">
  <div class="space-y-8">
    <!-- Description -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h2 class="text-xl font-semibold text-gray-900 mb-4">Card Component</h2>
      <p class="text-gray-600 mb-4">
        A flexible card component that adapts to its child content size, using phaser-wind tokens for styling.
      </p>
      
      <!-- Features -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-3">Features</h3>
        <ul class="list-disc list-inside space-y-1 text-gray-600">
          <li>ðŸŽ¯ <strong>Adaptable</strong>: Automatically adjusts to child size</li>
          <li>ðŸŽ¨ <strong>Stylable</strong>: Uses phaser-wind tokens for colors, border radius, and margins</li>
          <li>ðŸ”„ <strong>Flexible</strong>: Supports any Phaser GameObject as child</li>
          <li>âš¡ <strong>Performance</strong>: Uses Graphics directly (no textures)</li>
        </ul>
      </div>

      <!-- Props -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-3">Props</h3>
        <div class="bg-gray-50 rounded-lg p-4">
          <ul class="space-y-2 text-sm">
            <li><code class="bg-gray-200 px-2 py-1 rounded">backgroundColor</code> - Background color token or CSS color string</li>
            <li><code class="bg-gray-200 px-2 py-1 rounded">borderRadius</code> - Border radius token or pixel value</li>
            <li><code class="bg-gray-200 px-2 py-1 rounded">margin</code> - Spacing token or pixel value for internal padding</li>
            <li><code class="bg-gray-200 px-2 py-1 rounded">child</code> - Any Phaser GameObject to be contained within the card</li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Live Example -->
    <PhaserGame id="hudini-card-demo" width={800} height={600} />

    <!-- Usage Example -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
      <h3 class="text-lg font-semibold text-gray-900 mb-3">Usage Example</h3>
      <div class="bg-gray-900 rounded-lg p-4 overflow-x-auto">
        <pre class="text-sm text-gray-100"><code>{`import Phaser from 'phaser';
import {
    Color,
    createTheme,
    HUDINI_KEY,
    HudiniPlugin,
    SceneWithHudini,
    Card,
    TextButton
} from 'hudini';

const theme = createTheme({
    // Custom theme configuration
});
type Theme = typeof theme;

class PreviewScene extends SceneWithHudini<Theme> {
    constructor() {
        super('preview');
    }

    create(): void {
        const { pw } = this.hudini;
        this.cameras.main.setBackgroundColor(pw.color.slate(900));

        // Create a button to put inside the card
        const button = new TextButton({
            scene: this,
            x: 0,
            y: 0,
            text: 'Click Me!',
            backgroundColor: 'blue-500',
            textColor: 'white',
            borderRadius: 'md',
        });

        // Create a card containing the button
        const card = new Card({
            scene: this,
            x: this.cameras.main.centerX,
            y: this.cameras.main.centerY,
            backgroundColor: 'white',
            borderRadius: 'lg',
            margin: '6',
            child: button,
        });
        this.add.existing(card);
    }
}`}</code></pre>
      </div>
    </div>
  </div>
</Layout>

<script>
  import Phaser from 'phaser';
  import {
    Color,
    createTheme,
    HUDINI_KEY,
    HudiniPlugin,
    SceneWithHudini,
    Card,
    TextButton
  } from 'hudini';

  // Create theme
  const theme = createTheme({});
  type Theme = typeof theme;

  class CardDemoScene extends SceneWithHudini<Theme> {
    private card?: Card;
    private emptyCard?: Card;
    private text?: Phaser.GameObjects.Text;

    constructor() {
      super('card-demo');
    }

    create(): void {
      const { pw } = this.hudini;
      this.cameras.main.setBackgroundColor(pw.color.slate(900));

      // Create text for the card
      this.text = this.add.text(0, 0, 'Card with child', {
        color: this.pw.color.rgb('black'),
        align: 'center',
        fontSize: '18px',
      });

      // Create a card containing the text
      this.card = new Card({
        scene: this,
        x: this.cameras.main.centerX,
        y: this.cameras.main.centerY,
        backgroundColor: 'white',
        borderRadius: 'lg',
        margin: '6',
        child: this.text,
      });
      this.add.existing(this.card);

      // Create an empty card
      this.emptyCard = new Card({
        scene: this,
        x: this.cameras.main.centerX,
        y: this.cameras.main.centerY + 130,
        backgroundColor: 'green-500',
        borderRadius: 'lg',
        margin: '6',
        width: 200,
        height: 100,
      });
      this.add.existing(this.emptyCard);

      // Add text label for empty card example
      this.add.text(
        this.cameras.main.centerX,
        this.cameras.main.centerY + 200,
        'Example of empty card',
        {
          color: this.pw.color.rgb('white'),
          align: 'center',
          fontSize: '16px'
        }
      ).setOrigin(0.5, 0.5);
    }
  }

  // Initialize the game when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    const gameConfig = (window as any).gameConfig;
    if (gameConfig) {
      const game = new Phaser.Game({
        ...gameConfig,
        scene: [CardDemoScene],
        plugins: {
          global: [
            {
              key: HUDINI_KEY,
              plugin: HudiniPlugin,
              mapping: HUDINI_KEY,
              data: {
                theme,
              },
            },
          ],
        },
      });
      
      // Store the game instance
      if (!(window as any).__phaserGames) {
        (window as any).__phaserGames = {};
      }
      (window as any).__phaserGames['hudini-card-demo'] = game;
    }
  });
</script>